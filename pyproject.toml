[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "sonjayos"
version = "1.0.0"
description = "SonjayOS - AI集成操作系统"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "SonjayOS Team", email = "team@sonjayos.com"}
]
maintainers = [
    {name = "SonjayOS Team", email = "team@sonjayos.com"}
]
keywords = [
    "ai", "operating-system", "ubuntu", "llama", "whisper", "gnome", "linux"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Desktop Environment :: Gnome",
    "Topic :: System :: Operating Systems",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"
dependencies = [
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "sentence-transformers>=2.2.0",
    "openai-whisper>=20231117",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.22.0",
    "pydantic>=2.0.0",
    "psutil>=5.9.0",
    "pyaudio>=0.2.11",
    "requests>=2.31.0",
    "aiohttp>=3.8.0",
    "cryptography>=41.0.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.4.0",
    "pre-commit>=3.3.0",
    "isort>=5.12.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "memory-profiler>=0.60.0",
    "line-profiler>=4.1.0",
    "py-spy>=0.3.14",
    "watchdog>=3.0.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "mkdocs>=1.5.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "coverage>=7.0.0",
]

[project.urls]
Homepage = "https://github.com/sonjayos/sonjayos"
Documentation = "https://docs.sonjayos.com"
Repository = "https://github.com/sonjayos/sonjayos.git"
Issues = "https://github.com/sonjayos/sonjayos/issues"
Changelog = "https://github.com/sonjayos/sonjayos/blob/main/CHANGELOG.md"

[project.scripts]
sonjayos-ai = "src.ai.main:main"
sonjayos-ui = "src.ui.main:main"
sonjayos-security = "src.system.security.main:main"
sonjayos-dev = "scripts.dev_mode:main"
sonjayos-prod = "scripts.prod_mode:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml", "*.md", "*.txt"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
known_third_party = ["torch", "transformers", "fastapi", "pydantic"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",
    "sentence_transformers.*",
    "whisper.*",
    "pyaudio.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["src/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", "env"]
skips = ["B101", "B601"]

[tool.safety]
output = "json"
